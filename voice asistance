!pip install google-generativeai
!pip install -q neo4j-driver
!pip install -q gradio
!pip install -q git+https://github.com/openai/whisper.git
!pip install -q gTTS
     
import google.generativeai as palm
import base64
import json
import gradio as gr
import whisper
import time
import warnings
import os
import re
from gtts import gTTS
from neo4j import GraphDatabase


warnings.filterwarnings("ignore")
     

palm.configure("Enter your API key here")
     

def get_answer(input):

    defaults = {
    'model': 'models/text-bison-001',
    'temperature': 0.7,
    'candidate_count': 1,
    'top_k': 40,
    'top_p': 0.95,
    'max_output_tokens': 1024,
    'stop_sequences': [],
    'safety_settings': [{"category":"HARM_CATEGORY_DEROGATORY","threshold":1},{"category":"HARM_CATEGORY_TOXICITY","threshold":1},{"category":"HARM_CATEGORY_VIOLENCE","threshold":2},{"category":"HARM_CATEGORY_SEXUAL","threshold":2},{"category":"HARM_CATEGORY_MEDICAL","threshold":2},{"category":"HARM_CATEGORY_DANGEROUS","threshold":2}],
    }

    prompt = f"""You are an expert in converting English questions to Neo4j Cypher Graph code! The Graph has following Node Labels - Movie, Person and the Movie Node label has the following properties - released, tagline, title, the Person Node label has the following properties - name and born and the Graph has the following Relationship types ACTED_IN, DIRECTED, FOLLOWS, PRODUCED, REVIEWED, WROTE!

    All relationships ACTED_IN, DIRECTED, FOLLOWS, PRODUCED, REVIEWED, WROTE start from Person Nodes to the Movie Nodes and not the other way around.

    For example,
    Example 1 - List down 5 movies that released after the year 2000, the Cypher command will be something like this
    ``` MATCH (m:Movie)
        WHERE m.released > 2000
        RETURN m LIMIT 5
    ```
    Example 2 - Get all the people who acted in a movie that was released after 2010.
        ```
        MATCH (p:Person)-[r:ACTED_IN]-(m:Movie)
        WHERE m.released > 2010
        RETURN p,r,m
        ```
    Example 3 - Name the Director of the movie Apollo 13?
        ```
        MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
        WHERE m.title = 'Apollo 13'
        RETURN p.name
        ```
    Dont include ``` and \n in the output

    {input}

    """
    response = palm.generate_text(**defaults, prompt=prompt)
    return response.result
